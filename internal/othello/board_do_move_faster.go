package othello

/*
This source was adapted from
https://github.com/abulmo/edax-reversi/blob/master/src/flip_carry_64.c

which means this file is licensed as GPL
*/

/**
 * @file flip_carry_64.c
 *
 * This module deals with flipping discs.
 *
 * A function is provided for each square of the board. These functions are
 * gathered into an array of functions, so that a fast access to each function
 * is allowed. The generic form of the function take as input the player and
 * the opponent bitboards and return the flipped squares into a bitboard.
 *
 * Given the following notation:
 *  - x = square where we play,
 *  - P = player's disc pattern,
 *  - O = opponent's disc pattern,
 * the basic principle is to read into an array the result of a move. Doing
 * this is easier for a single line ; so we can use arrays of the form:
 *  - ARRAY[x][8-bits disc pattern].
 * The problem is thus to convert any line of a 64-bits disc pattern into an
 * 8-bits disc pattern. A fast way to do this is to select the right line,
 * with a bit-mask, to gather the masked-bits into a continuous set by a simple
 * multiplication and to right-shift the result to scale it into a number
 * between 0 and 255.
 * Once we get our 8-bits disc patterns,a first array (OUTFLANK) is used to
 * get the player's discs that surround the opponent discs:
 *  - outflank = OUTFLANK[x][O] & P
 * (Only inner 6-bits of the P are in interest here.)
 * The result is then used as an index to access a second array giving the
 * flipped discs according to the surrounding player's discs:
 *  - flipped = FLIPPED[x][outflank].
 * (Flipped discs fall into inner 6-bits.)
 * Finally, a precomputed array transform the inner 6-bits disc pattern back into a
 * 64-bits disc pattern, and the flipped squares for each line are gathered and
 * returned to generate moves.
 *
 * If the OUTFLANK search is in LSB to MSB direction, carry propagation
 * can be used to determine contiguous opponent discs.
 * If the OUTFLANK search is in MSB to LSB direction, CONTIG_X tables
 * are used to determine coutiguous opponent discs.
 *
 * @date 1998 - 2017
 * @author Richard Delorme
 * @author Toshihiko Okuhara
 * @version 4.4
 */

var OUTFLANK_2 = [64]byte{
	0x00, 0x01, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x21, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x40, 0x41, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x21, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x81, 0x00, 0x00,
}

var OUTFLANK_3 = [64]byte{
	0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x22, 0x21, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x42, 0x41, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x22, 0x21, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x82, 0x81, 0x00, 0x00, 0x00, 0x00,
}

var OUTFLANK_4 = [64]byte{
	0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x40, 0x40, 0x40, 0x40, 0x44, 0x44, 0x42, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x80, 0x80, 0x80, 0x80, 0x84, 0x84, 0x82, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
}

var OUTFLANK_5 = [64]byte{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x88, 0x88, 0x88, 0x88, 0x84, 0x84, 0x82, 0x81,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
}

var OUTFLANK_7 = [64]byte{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x01,
}

/* (Count of leading 1 from bit 5) * 8 */
var CONTIG_UP = [64]byte{
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
	16, 16, 16, 16, 16, 16, 16, 16, 24, 24, 24, 24, 32, 32, 40, 48,
}

/* (Count of leading 1 from bit 5) * 9 */
var CONTIG_UPLEFT = [64]byte{
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	18, 18, 18, 18, 18, 18, 18, 18, 27, 27, 27, 27, 36, 36, 45, 54,
}

/* (Count of trailing 1) * 7 */
var CONTIG_UPRIGHT = [64]byte{
	0, 7, 0, 14, 0, 7, 0, 21, 0, 7, 0, 14, 0, 7, 0, 28,
	0, 7, 0, 14, 0, 7, 0, 21, 0, 7, 0, 14, 0, 7, 0, 35,
	0, 7, 0, 14, 0, 7, 0, 21, 0, 7, 0, 14, 0, 7, 0, 28,
	0, 7, 0, 14, 0, 7, 0, 21, 0, 7, 0, 14, 0, 7, 0, 42,
}

/** flip array (indexed with outflank, returns inner 6 bits) */
var FLIPPED_2_H = [130]uint64{
	0x0000000000000000, 0x0202020202020202, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0808080808080808, 0x0a0a0a0a0a0a0a0a, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x1818181818181818, 0x1a1a1a1a1a1a1a1a, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x3838383838383838, 0x3a3a3a3a3a3a3a3a, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x7878787878787878, 0x7a7a7a7a7a7a7a7a,
}

var FLIPPED_3_H = [131]uint64{
	0x0000000000000000, 0x0606060606060606, 0x0404040404040404, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x1010101010101010, 0x1616161616161616, 0x1414141414141414, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x3030303030303030, 0x3636363636363636, 0x3434343434343434, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x7070707070707070, 0x7676767676767676, 0x7474747474747474,
}

var FLIPPED_4_H = [133]uint64{
	0x0000000000000000, 0x0e0e0e0e0e0e0e0e, 0x0c0c0c0c0c0c0c0c, 0x0000000000000000, 0x0808080808080808, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x2020202020202020, 0x2e2e2e2e2e2e2e2e, 0x2c2c2c2c2c2c2c2c, 0x0000000000000000, 0x2828282828282828, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x6060606060606060, 0x6e6e6e6e6e6e6e6e, 0x6c6c6c6c6c6c6c6c, 0x0000000000000000, 0x6868686868686868,
}

var FLIPPED_5_H = [137]uint64{
	0x0000000000000000, 0x1e1e1e1e1e1e1e1e, 0x1c1c1c1c1c1c1c1c, 0x0000000000000000, 0x1818181818181818, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x1010101010101010, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x4040404040404040, 0x5e5e5e5e5e5e5e5e, 0x5c5c5c5c5c5c5c5c, 0x0000000000000000, 0x5858585858585858, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x5050505050505050,
}

var FLIPPED_3_V = [131]uint64{
	0x0000000000000000, 0x0000000000ffff00, 0x0000000000ff0000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x000000ff00000000, 0x000000ff00ffff00, 0x000000ff00ff0000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000ffff00000000, 0x0000ffff00ffff00, 0x0000ffff00ff0000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x00ffffff00000000, 0x00ffffff00ffff00, 0x00ffffff00ff0000,
}

var FLIPPED_4_V = [133]uint64{
	0x0000000000000000, 0x00000000ffffff00, 0x00000000ffff0000, 0x0000000000000000, 0x00000000ff000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000ff0000000000, 0x0000ff00ffffff00, 0x0000ff00ffff0000, 0x0000000000000000, 0x0000ff00ff000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x00ffff0000000000, 0x00ffff00ffffff00, 0x00ffff00ffff0000, 0x0000000000000000, 0x00ffff00ff000000,
}

var FLIPPED_5_V = [137]uint64{
	0x0000000000000000, 0x000000ffffffff00, 0x000000ffffff0000, 0x0000000000000000, 0x000000ffff000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x000000ff00000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x00ff000000000000, 0x00ff00ffffffff00, 0x00ff00ffffff0000, 0x0000000000000000, 0x00ff00ffff000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x00ff00ff00000000,
}

var FLIPPED_3_U = [131]uint64{
	0x0000000000000000, 0x00ffff0000000000, 0x0000ff0000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x00000000ff000000, 0x00ffff00ff000000, 0x0000ff00ff000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x00000000ffff0000, 0x00ffff00ffff0000, 0x0000ff00ffff0000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
	0x00000000ffffff00, 0x00ffff00ffffff00, 0x0000ff00ffffff00,
}

func uint64_any(value uint64) uint64 {
	if value == 0 {
		return 0
	}
	return 1
}

/**
 * Compute flipped discs when playing on square A1.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_A1(P, O uint64) uint64 {
	var flipped, outflank_v, outflank_h, outflank_d9 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x0101010101010100)) + 0x0000000000000100) & P & 0x0101010101010100
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x0101010101010100

	outflank_h = ((O & 0x000000000000007e) + 0x0000000000000002) & P
	flipped |= (outflank_h - uint64_any(outflank_h)) & 0x000000000000007e

	outflank_d9 = ((O | (0xFFFFFFFFFFFFFFFF - 0x8040201008040200)) + 0x0000000000000200) & P & 0x8040201008040200
	flipped |= (outflank_d9 - uint64_any(outflank_d9)) & 0x8040201008040200

	return flipped
}

/**
 * Compute flipped discs when playing on square B1.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_B1(P, O uint64) uint64 {
	var flipped, outflank_v, outflank_h, outflank_d9 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x0202020202020200)) + 0x0000000000000200) & P & 0x0202020202020200
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x0202020202020200

	outflank_h = ((O & 0x000000000000007c) + 0x0000000000000004) & P
	flipped |= (outflank_h - uint64_any(outflank_h)) & 0x000000000000007c

	outflank_d9 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0080402010080400)) + 0x0000000000000400) & P & 0x0080402010080400
	flipped |= (outflank_d9 - uint64_any(outflank_d9)) & 0x0080402010080400

	return flipped
}

/**
 * Compute flipped discs when playing on square C1.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_C1(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d9 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x0404040404040400)) + 0x0000000000000400) & P & 0x0404040404040400
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x0404040404040400

	outflank_h = uint64(OUTFLANK_2[(O>>1)&0x3f]) & P
	flipped |= FLIPPED_2_H[outflank_h] & 0xFF

	flipped |= ((P >> 7) & 0x0000000000000200 & O)

	outflank_d9 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0000804020100800)) + 0x0000000000000800) & P & 0x0000804020100800
	flipped |= (outflank_d9 - uint64_any(outflank_d9)) & 0x0000804020100800

	return flipped
}

/**
 * Compute flipped discs when playing on square D1.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_D1(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d7, outflank_d9 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x0808080808080800)) + 0x0000000000000800) & P & 0x0808080808080800
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x0808080808080800

	outflank_h = uint64(OUTFLANK_3[(O>>1)&0x3f]) & P
	flipped |= FLIPPED_3_H[outflank_h] & 0xFF

	outflank_d7 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0000000001020400)) + 0x0000000000000400) & P & 0x0000000001020400
	flipped |= (outflank_d7 - uint64_any(outflank_d7)) & 0x0000000001020400

	outflank_d9 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0000008040201000)) + 0x0000000000001000) & P & 0x0000008040201000
	flipped |= (outflank_d9 - uint64_any(outflank_d9)) & 0x0000008040201000

	return flipped
}

/**
 * Compute flipped discs when playing on square E1.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_E1(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d7, outflank_d9 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x1010101010101000)) + 0x0000000000001000) & P & 0x1010101010101000
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x1010101010101000

	outflank_h = uint64(OUTFLANK_4[(O>>1)&0x3f]) & P
	flipped |= FLIPPED_4_H[outflank_h] & 0xFF

	outflank_d7 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0000000102040800)) + 0x0000000000000800) & P & 0x0000000102040800
	flipped |= (outflank_d7 - uint64_any(outflank_d7)) & 0x0000000102040800

	outflank_d9 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0000000080402000)) + 0x0000000000002000) & P & 0x0000000080402000
	flipped |= (outflank_d9 - uint64_any(outflank_d9)) & 0x0000000080402000

	return flipped
}

/**
 * Compute flipped discs when playing on square F1.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_F1(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d7 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x2020202020202000)) + 0x0000000000002000) & P & 0x2020202020202000
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x2020202020202000

	outflank_h = uint64(OUTFLANK_5[(O>>1)&0x3f]) & P
	flipped |= FLIPPED_5_H[outflank_h] & 0xFF

	outflank_d7 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0000010204081000)) + 0x0000000000001000) & P & 0x0000010204081000
	flipped |= (outflank_d7 - uint64_any(outflank_d7)) & 0x0000010204081000

	flipped |= ((P >> 9) & 0x0000000000004000 & O)

	return flipped
}

/**
 * Compute flipped discs when playing on square G1.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_G1(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d7 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x4040404040404000)) + 0x0000000000004000) & P & 0x4040404040404000
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x4040404040404000

	outflank_h = uint64(OUTFLANK_7[O&0x3e]) & (P << 1)
	flipped |= ((-outflank_h) & 0x3e) << 0

	outflank_d7 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0001020408102000)) + 0x0000000000002000) & P & 0x0001020408102000
	flipped |= (outflank_d7 - uint64_any(outflank_d7)) & 0x0001020408102000

	return flipped
}

/**
 * Compute flipped discs when playing on square H1.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_H1(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d7 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x8080808080808000)) + 0x0000000000008000) & P & 0x8080808080808000
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x8080808080808000

	outflank_h = uint64(OUTFLANK_7[(O>>1)&0x3f]) & P
	flipped |= ((-outflank_h) & 0x3f) << 1

	outflank_d7 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0102040810204000)) + 0x0000000000004000) & P & 0x0102040810204000
	flipped |= (outflank_d7 - uint64_any(outflank_d7)) & 0x0102040810204000

	return flipped
}

/**
 * Compute flipped discs when playing on square A2.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_A2(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d9 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x0101010101010000)) + 0x0000000000010000) & P & 0x0101010101010000
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x0101010101010000

	outflank_h = ((O & 0x0000000000007e00) + 0x0000000000000200) & P
	flipped |= (outflank_h - (outflank_h >> 8)) & 0x0000000000007e00

	outflank_d9 = ((O | (0xFFFFFFFFFFFFFFFF - 0x4020100804020000)) + 0x0000000000020000) & P & 0x4020100804020000
	flipped |= (outflank_d9 - uint64_any(outflank_d9)) & 0x4020100804020000

	return flipped
}

/**
 * Compute flipped discs when playing on square B2.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_B2(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d9 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x0202020202020000)) + 0x0000000000020000) & P & 0x0202020202020000
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x0202020202020000

	outflank_h = ((O & 0x0000000000007c00) + 0x0000000000000400) & P
	flipped |= (outflank_h - (outflank_h >> 8)) & 0x0000000000007c00

	outflank_d9 = ((O | (0xFFFFFFFFFFFFFFFF - 0x8040201008040000)) + 0x0000000000040000) & P & 0x8040201008040000
	flipped |= (outflank_d9 - uint64_any(outflank_d9)) & 0x8040201008040000

	return flipped
}

/**
 * Compute flipped discs when playing on square C2.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_C2(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d9 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x0404040404040000)) + 0x0000000000040000) & P & 0x0404040404040000
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x0404040404040000

	outflank_h = uint64(OUTFLANK_2[(O>>9)&0x3f]) & (P >> 8)
	flipped |= FLIPPED_2_H[outflank_h] & 0x000000000000ff00

	flipped |= ((P >> 7) & 0x0000000000020000 & O)

	outflank_d9 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0080402010080000)) + 0x0000000000080000) & P & 0x0080402010080400
	flipped |= (outflank_d9 - uint64_any(outflank_d9)) & 0x0080402010080000

	return flipped
}

/**
 * Compute flipped discs when playing on square D2.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_D2(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d7, outflank_d9 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x0808080808080000)) + 0x0000000000080000) & P & 0x0808080808080000
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x0808080808080000

	outflank_h = uint64(OUTFLANK_3[(O>>9)&0x3f]) & (P >> 8)
	flipped |= FLIPPED_3_H[outflank_h] & 0x000000000000ff00

	outflank_d7 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0000000102040000)) + 0x0000000000040000) & P & 0x0000000102040000
	flipped |= (outflank_d7 - uint64_any(outflank_d7)) & 0x0000000102040000

	outflank_d9 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0000804020100000)) + 0x0000000000100000) & P & 0x0000804020100000
	flipped |= (outflank_d9 - uint64_any(outflank_d9)) & 0x0000804020100000

	return flipped
}

/**
 * Compute flipped discs when playing on square E2.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_E2(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d7, outflank_d9 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x1010101010100000)) + 0x0000000000100000) & P & 0x1010101010100000
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x1010101010100000

	outflank_h = uint64(OUTFLANK_4[(O>>9)&0x3f]) & (P >> 8)
	flipped |= FLIPPED_4_H[outflank_h] & 0x000000000000ff00

	outflank_d7 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0000010204080000)) + 0x0000000000080000) & P & 0x0000010204080000
	flipped |= (outflank_d7 - uint64_any(outflank_d7)) & 0x0000010204080000

	outflank_d9 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0000008040200000)) + 0x0000000000200000) & P & 0x0000008040200000
	flipped |= (outflank_d9 - uint64_any(outflank_d9)) & 0x0000008040200000

	return flipped
}

/**
 * Compute flipped discs when playing on square F2.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_F2(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d7 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x2020202020200000)) + 0x0000000000200000) & P & 0x2020202020200000
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x2020202020200000

	outflank_h = uint64(OUTFLANK_5[(O>>9)&0x3f]) & (P >> 8)
	flipped |= FLIPPED_5_H[outflank_h] & 0x000000000000ff00

	outflank_d7 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0001020408100000)) + 0x0000000000100000) & P & 0x0001020408100000
	flipped |= (outflank_d7 - uint64_any(outflank_d7)) & 0x0001020408100000

	flipped |= ((P >> 9) & 0x0000000000400000 & O)

	return flipped
}

/**
 * Compute flipped discs when playing on square G2.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_G2(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d7 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x4040404040400000)) + 0x0000000000400000) & P & 0x4040404040400000
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x4040404040400000

	outflank_h = uint64(OUTFLANK_7[(O>>8)&0x3e]) & (P >> 7)
	flipped |= ((-outflank_h) & 0x3e) << 8

	outflank_d7 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0102040810200000)) + 0x0000000000200000) & P & 0x0102040810200000
	flipped |= (outflank_d7 - uint64_any(outflank_d7)) & 0x0102040810200000

	return flipped
}

/**
 * Compute flipped discs when playing on square H2.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_H2(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d7 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x8080808080800000)) + 0x0000000000800000) & P & 0x8080808080800000
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x8080808080800000

	outflank_h = uint64(OUTFLANK_7[(O>>9)&0x3f]) & (P >> 8)
	flipped |= ((-outflank_h) & 0x3f) << 9

	outflank_d7 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0204081020400000)) + 0x0000000000400000) & P & 0x0204081020400000
	flipped |= (outflank_d7 - uint64_any(outflank_d7)) & 0x0204081020400000

	return flipped
}

/**
 * Compute flipped discs when playing on square A3.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_A3(P, O uint64) uint64 {
	var flipped, outflank_v, outflank_h, outflank_d9 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x0101010101000000)) + 0x0000000001000000) & P & 0x0101010101000000
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x0101010101000000

	outflank_h = ((O & 0x00000000007e0000) + 0x0000000000020000) & P
	flipped |= (outflank_h - (outflank_h >> 8)) & 0x00000000007e0000

	outflank_d9 = ((O | (0xFFFFFFFFFFFFFFFF - 0x2010080402000000)) + 0x0000000002000000) & P & 0x2010080402000000
	flipped |= (outflank_d9 - uint64_any(outflank_d9)) & 0x2010080402000000

	flipped |= (((P << 8) & 0x0000000000000100) | ((P << 7) & 0x0000000000000200)) & O

	return flipped
}

/**
 * Compute flipped discs when playing on square B3.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_B3(P, O uint64) uint64 {
	var flipped, outflank_v, outflank_h, outflank_d9 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x0202020202000000)) + 0x0000000002000000) & P & 0x0202020202000000
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x0202020202000000

	outflank_h = ((O & 0x00000000007c0000) + 0x0000000000040000) & P
	flipped |= (outflank_h - (outflank_h >> 8)) & 0x00000000007c0000

	outflank_d9 = ((O | (0xFFFFFFFFFFFFFFFF - 0x4020100804000000)) + 0x0000000004000000) & P & 0x4020100804000000
	flipped |= (outflank_d9 - uint64_any(outflank_d9)) & 0x4020100804000000

	flipped |= (((P << 8) & 0x0000000000000200) | ((P << 7) & 0x0000000000000400)) & O

	return flipped
}

/**
 * Compute flipped discs when playing on square C3.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_C3(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d9 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x0404040404000000)) + 0x0000000004000000) & P & 0x0404040404000000
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x0404040404000000

	outflank_h = uint64(OUTFLANK_2[(O>>17)&0x3f]) & (P >> 16)
	flipped |= FLIPPED_2_H[outflank_h] & 0x0000000000ff0000

	outflank_d9 = ((O | (0xFFFFFFFFFFFFFFFF - 0x8040201008000000)) + 0x0000000008000000) & P & 0x8040201008000000
	flipped |= (outflank_d9 - uint64_any(outflank_d9)) & 0x8040201008000000

	flipped |= (((P << 8) & 0x0000000000000400) | ((P << 9) & 0x0000000000000200) | (((P >> 7) | (P << 7)) & 0x000000002000800)) & O

	return flipped
}

/**
 * Compute flipped discs when playing on square D3.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_D3(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d7, outflank_d9 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x0808080808000000)) + 0x0000000008000000) & P & 0x0808080808000000
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x0808080808000000

	outflank_h = uint64(OUTFLANK_3[(O>>17)&0x3f]) & (P >> 16)
	flipped |= FLIPPED_3_H[outflank_h] & 0x0000000000ff0000

	outflank_d7 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0000010204000000)) + 0x0000000004000000) & P & 0x0000010204000000
	flipped |= (outflank_d7 - (outflank_d7 >> 24)) & 0x0000010204000000

	outflank_d9 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0080402010000000)) + 0x0000000010000000) & P & 0x0080402010000000
	flipped |= (outflank_d9 - uint64_any(outflank_d9)) & 0x0080402010000000

	flipped |= (((P << 8) & 0x0000000000000800) | ((P << 7) & 0x0000000000001000) | ((P << 9) & 0x000000000000400)) & O

	return flipped
}

/**
 * Compute flipped discs when playing on square E3.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_E3(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d7, outflank_d9 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x1010101010000000)) + 0x0000000010000000) & P & 0x1010101010000000
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x1010101010000000

	outflank_h = uint64(OUTFLANK_4[(O>>17)&0x3f]) & (P >> 16)
	flipped |= FLIPPED_4_H[outflank_h] & 0x0000000000ff0000

	outflank_d7 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0001020408000000)) + 0x0000000008000000) & P & 0x0001020408000000
	flipped |= (outflank_d7 - uint64_any(outflank_d7)) & 0x0001020408000000

	outflank_d9 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0000804020000000)) + 0x0000000020000000) & P & 0x0000804020000000
	flipped |= (outflank_d9 - (outflank_d9 >> 24)) & 0x0000804020000000

	flipped |= (((P << 8) & 0x0000000000001000) | ((P << 7) & 0x0000000000002000) | ((P << 9) & 0x000000000000800)) & O

	return flipped
}

/**
 * Compute flipped discs when playing on square F3.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_F3(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d7 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x2020202020000000)) + 0x0000000020000000) & P & 0x2020202020000000
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x2020202020000000

	outflank_h = uint64(OUTFLANK_5[(O>>17)&0x3f]) & (P >> 16)
	flipped |= FLIPPED_5_H[outflank_h] & 0x0000000000ff0000

	outflank_d7 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0102040810000000)) + 0x0000000010000000) & P & 0x0102040810000000
	flipped |= (outflank_d7 - uint64_any(outflank_d7)) & 0x0102040810000000

	flipped |= (((P << 8) & 0x0000000000002000) | ((P << 7) & 0x0000000000004000) | (((P >> 9) | (P << 9)) & 0x0000000040001000)) & O

	return flipped
}

/**
 * Compute flipped discs when playing on square G3.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_G3(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d7 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x4040404040000000)) + 0x0000000040000000) & P & 0x4040404040000000
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x4040404040000000

	outflank_h = uint64(OUTFLANK_7[(O>>16)&0x3e]) & (P >> 15)
	flipped |= ((-outflank_h) & 0x3e) << 16

	outflank_d7 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0204081020000000)) + 0x0000000020000000) & P & 0x0204081020000000
	flipped |= (outflank_d7 - uint64_any(outflank_d7)) & 0x0204081020000000

	flipped |= (((P << 8) & 0x0000000000004000) | ((P << 9) & 0x0000000000002000)) & O

	return flipped
}

/**
 * Compute flipped discs when playing on square H3.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_H3(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d7 uint64

	outflank_v = ((O | (0xFFFFFFFFFFFFFFFF - 0x8080808080000000)) + 0x0000000080000000) & P & 0x8080808080000000
	flipped = (outflank_v - uint64_any(outflank_v)) & 0x8080808080000000

	outflank_h = uint64(OUTFLANK_7[(O>>17)&0x3f]) & (P >> 16)
	flipped |= ((-outflank_h) & 0x3f) << 17

	outflank_d7 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0408102040000000)) + 0x0000000040000000) & P & 0x0408102040000000
	flipped |= (outflank_d7 - uint64_any(outflank_d7)) & 0x0408102040000000

	flipped |= (((P << 8) & 0x0000000000008000) | ((P << 9) & 0x0000000000004000)) & O

	return flipped
}

/**
 * Compute flipped discs when playing on square A4.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_A4(P, O uint64) uint64 {
	var outflank_v uint64
	var flipped, outflank_h, flip_d7, outflank_d9 uint64

	outflank_v = uint64(OUTFLANK_3[((O&0x0001010101010100)*0x0102040810204080)>>57]) & (((P & 0x0101010101010101) * 0x0102040810204080) >> 56)
	flipped = FLIPPED_3_V[outflank_v] & 0x0001010101010100

	outflank_h = ((O & 0x000000007e000000) + 0x0000000002000000) & P
	flipped |= (outflank_h - (outflank_h >> 8)) & 0x000000007e000000

	flip_d7 = O & 0x0000000000020000
	flip_d7 |= (flip_d7 >> 7) & O
	flipped |= flip_d7 & -(flip_d7 & (P << 7))

	outflank_d9 = ((O | (0xFFFFFFFFFFFFFFFF - 0x1008040200000000)) + 0x0000000200000000) & P & 0x1008040200000000
	flipped |= (outflank_d9 - (outflank_d9 >> 32)) & 0x1008040200000000

	return flipped
}

/**
 * Compute flipped discs when playing on square B4.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_B4(P, O uint64) uint64 {
	var outflank_v uint64
	var flipped, outflank_h, flip_d7, outflank_d9 uint64

	outflank_v = uint64(OUTFLANK_3[((O&0x0002020202020200)*0x0081020408102040)>>57]) & (((P & 0x0202020202020202) * 0x0081020408102040) >> 56)
	flipped = FLIPPED_3_V[outflank_v] & 0x0002020202020200

	outflank_h = ((O & 0x000000007c000000) + 0x0000000004000000) & P
	flipped |= (outflank_h - (outflank_h >> 8)) & 0x000000007c000000

	flip_d7 = O & 0x0000000000040000
	flip_d7 |= (flip_d7 >> 7) & O
	flipped |= flip_d7 & -(flip_d7 & (P << 7))

	outflank_d9 = ((O | (0xFFFFFFFFFFFFFFFF - 0x2010080400000000)) + 0x0000000400000000) & P & 0x2010080400000000
	flipped |= (outflank_d9 - (outflank_d9 >> 32)) & 0x2010080400000000

	return flipped
}

/**
 * Compute flipped discs when playing on square C4.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_C4(P, O uint64) uint64 {
	var outflank_h, outflank_v uint64
	var flipped, flip_d7, outflank_d9 uint64

	outflank_v = uint64(OUTFLANK_3[((O&0x0004040404040400)*0x0040810204081020)>>57]) & (((P & 0x0404040404040404) * 0x0040810204081020) >> 56)
	flipped = FLIPPED_3_V[outflank_v] & 0x0004040404040400

	outflank_h = uint64(OUTFLANK_2[(O>>25)&0x3f]) & (P >> 24)
	flipped |= FLIPPED_2_H[outflank_h] & 0x00000000ff000000

	flip_d7 = O & 0x0000000000080000
	flip_d7 |= (flip_d7 >> 7) & O
	flipped |= flip_d7 & -(flip_d7 & (P << 7))

	outflank_d9 = ((O | (0xFFFFFFFFFFFFFFFF - 0x4020100800000000)) + 0x0000000800000000) & P & 0x4020100800000000
	flipped |= (outflank_d9 - (outflank_d9 >> 32)) & 0x4020100800000000

	flipped |= (((P << 9) & 0x00000000000020000) | ((P >> 7) & 0x00000000200000000)) & O

	return flipped
}

/**
 * Compute flipped discs when playing on square D4.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_D4(P, O uint64) uint64 {
	var outflank_h, outflank_v, outflank_d7, outflank_d9 uint64
	var flipped uint64

	outflank_v = uint64(OUTFLANK_3[((O&0x0008080808080800)*0x0020408102040810)>>57]) & (((P & 0x0808080808080808) * 0x0020408102040810) >> 56)
	flipped = FLIPPED_3_V[outflank_v] & 0x0008080808080800

	outflank_h = uint64(OUTFLANK_3[(O>>25)&0x3f]) & (P >> 24)
	flipped |= FLIPPED_3_H[outflank_h] & 0x00000000ff000000

	outflank_d7 = uint64(OUTFLANK_3[((O&0x0000020408102000)*0x0101010101010101)>>57]) & (((P & 0x0001020408102040) * 0x0101010101010101) >> 56)
	flipped |= FLIPPED_3_H[outflank_d7] & 0x0000020408102000

	outflank_d9 = uint64(OUTFLANK_3[((O&0x0040201008040200)*0x0101010101010101)>>57]) & (((P & 0x8040201008040201) * 0x0101010101010101) >> 56)
	flipped |= FLIPPED_3_H[outflank_d9] & 0x0040201008040200

	return flipped
}

/**
 * Compute flipped discs when playing on square E3.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_E4(P, O uint64) uint64 {
	var outflank_h, outflank_v, outflank_d7, outflank_d9 uint64
	var flipped uint64

	outflank_v = uint64(OUTFLANK_3[((O&0x0010101010101000)*0x0010204081020408)>>57]) & (((P & 0x1010101010101010) * 0x0010204081020408) >> 56)
	flipped = FLIPPED_3_V[outflank_v] & 0x0010101010101000

	outflank_h = uint64(OUTFLANK_4[(O>>25)&0x3f]) & (P >> 24)
	flipped |= FLIPPED_4_H[outflank_h] & 0x00000000ff000000

	outflank_d7 = uint64(OUTFLANK_4[((O&0x0002040810204000)*0x0101010101010101)>>57]) & (((P & 0x0102040810204080) * 0x0101010101010101) >> 56)
	flipped |= FLIPPED_4_H[outflank_d7] & 0x0002040810204000

	outflank_d9 = uint64(OUTFLANK_4[((O&0x0000402010080400)*0x0101010101010101)>>57]) & (((P & 0x0080402010080402) * 0x0101010101010101) >> 56)
	flipped |= FLIPPED_4_H[outflank_d9] & 0x0000402010080400

	return flipped
}

/**
 * Compute flipped discs when playing on square F4.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_F4(P, O uint64) uint64 {
	var outflank_h, outflank_v uint64
	var flipped, outflank_d7, flip_d9 uint64

	outflank_v = uint64(OUTFLANK_3[((O&0x0020202020202000)*0x0008102040810204)>>57]) & (((P & 0x2020202020202020) * 0x0008102040810204) >> 56)
	flipped = FLIPPED_3_V[outflank_v] & 0x0020202020202000

	outflank_h = uint64(OUTFLANK_5[(O>>25)&0x3f]) & (P >> 24)
	flipped |= FLIPPED_5_H[outflank_h] & 0x00000000ff000000

	outflank_d7 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0204081000000000)) + 0x0000001000000000) & P & 0x0204081000000000
	flipped |= (outflank_d7 - (outflank_d7 >> 32)) & 0x0204081000000000

	flip_d9 = O & 0x0000000000100000
	flip_d9 |= (flip_d9 >> 9) & O
	flipped |= flip_d9 & -(flip_d9 & (P << 9))

	flipped |= (((P << 7) & 0x0000000000400000) | ((P >> 9) & 0x0000004000000000)) & O

	return flipped
}

/**
 * Compute flipped discs when playing on square G4.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_G4(P, O uint64) uint64 {
	var outflank_h, outflank_v uint64
	var flipped, outflank_d7, flip_d9 uint64

	outflank_v = uint64(OUTFLANK_3[((O&0x0040404040404000)*0x0004081020408102)>>57]) & (((P & 0x4040404040404040) * 0x0004081020408102) >> 56)
	flipped = FLIPPED_3_V[outflank_v] & 0x0040404040404000

	outflank_h = uint64(OUTFLANK_7[(O>>24)&0x3e]) & (P >> 23)
	flipped |= ((-outflank_h) & 0x3e) << 24

	outflank_d7 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0408102000000000)) + 0x0000002000000000) & P & 0x0408102000000000
	flipped |= (outflank_d7 - (outflank_d7 >> 32)) & 0x0408102000000000

	flip_d9 = O & 0x0000000000200000
	flip_d9 |= (flip_d9 >> 9) & O
	flipped |= flip_d9 & -(flip_d9 & (P << 9))

	return flipped
}

/**
 * Compute flipped discs when playing on square H4.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_H4(P, O uint64) uint64 {
	var outflank_h, outflank_v uint64
	var flipped, outflank_d7, flip_d9 uint64

	outflank_v = uint64(OUTFLANK_3[((O&0x0080808080808000)*0x0002040810204081)>>57]) & (((P & 0x8080808080808080) * 0x0002040810204081) >> 56)
	flipped = FLIPPED_3_V[outflank_v] & 0x0080808080808000

	outflank_h = uint64(OUTFLANK_7[(O>>25)&0x3f]) & (P >> 24)
	flipped |= ((-outflank_h) & 0x3f) << 25

	outflank_d7 = ((O | (0xFFFFFFFFFFFFFFFF - 0x0810204000000000)) + 0x0000004000000000) & P & 0x0810204000000000
	flipped |= (outflank_d7 - (outflank_d7 >> 32)) & 0x0810204000000000

	flip_d9 = O & 0x0000000000400000
	flip_d9 |= (flip_d9 >> 9) & O
	flipped |= flip_d9 & -(flip_d9 & (P << 9))

	return flipped
}

/**
 * Compute flipped discs when playing on square A5.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_A5(P, O uint64) uint64 {
	var outflank_a1a5d8, outflank_a8a5e1 uint64
	var flipped, outflank_h uint64

	outflank_a1a5d8 = uint64(OUTFLANK_4[((O&0x0004020101010100)*0x0102040810101010)>>57]) & (((P & 0x0804020101010101) * 0x0102040810101010) >> 56)
	flipped = FLIPPED_4_V[outflank_a1a5d8] & 0x0004020101010100

	outflank_a8a5e1 = uint64(OUTFLANK_3[((O&0x0001010102040800)*0x0808080808040201)>>57]) & (((P & 0x0101010102040810) * 0x0808080808040201) >> 56)
	flipped |= FLIPPED_3_U[outflank_a8a5e1] & 0x0001010102040800

	outflank_h = ((O & 0x0000007e00000000) + 0x0000000200000000) & P
	flipped |= (outflank_h - (outflank_h >> 8)) & 0x0000007e00000000

	return flipped
}

/**
 * Compute flipped discs when playing on square B5.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_B5(P, O uint64) uint64 {
	var outflank_b1b5e8, outflank_b8b5f1 uint64
	var flipped, outflank_h uint64

	outflank_b1b5e8 = uint64(OUTFLANK_4[((O&0x0008040202020200)*0x0081020408080808)>>57]) & (((P & 0x1008040202020202) * 0x0081020408080808) >> 56)
	flipped = FLIPPED_4_V[outflank_b1b5e8] & 0x0008040202020200

	outflank_b8b5f1 = uint64(OUTFLANK_3[((O&0x0002020204081000)*0x0808080808040201)>>58]) & ((((P & 0x0202020204081020) >> 1) * 0x0808080808040201) >> 56)
	flipped |= FLIPPED_3_U[outflank_b8b5f1] & 0x0002020204081000

	outflank_h = ((O & 0x0000007c00000000) + 0x0000000400000000) & P
	flipped |= (outflank_h - (outflank_h >> 8)) & 0x0000007c00000000

	return flipped
}

/**
 * Compute flipped discs when playing on square C5.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_C5(P, O uint64) uint64 {
	var outflank_c1c5f8, outflank_c8c5g1 uint64
	var flipped, outflank_h uint64

	outflank_c1c5f8 = uint64(OUTFLANK_4[((O&0x0010080404040400)*0x0040810204040404)>>57]) & (((P & 0x2010080404040404) * 0x0040810204040404) >> 56)
	flipped = FLIPPED_4_V[outflank_c1c5f8] & 0x0010080404040400

	outflank_c8c5g1 = uint64(OUTFLANK_3[((O&0x0004040408102000)*0x0002020202010080)>>57]) & ((((P & 0x0404040408102040) >> 2) * 0x0808080808040201) >> 56)
	flipped |= FLIPPED_3_U[outflank_c8c5g1] & 0x0004040408102000

	outflank_h = uint64(OUTFLANK_2[(O>>33)&0x3f]) & (P >> 32)
	flipped |= FLIPPED_2_H[outflank_h] & 0x000000ff00000000

	flipped |= (((P << 9) & 0x0000000002000000) | ((P >> 7) & 0x0000020000000000)) & O

	return flipped
}

/**
 * Compute flipped discs when playing on square D5.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_D5(P, O uint64) uint64 {
	var outflank_h, outflank_v, outflank_d7, outflank_d9 uint64
	var flipped uint64

	outflank_v = uint64(OUTFLANK_4[((O&0x0008080808080800)*0x0020408102040810)>>57]) & (((P & 0x0808080808080808) * 0x0020408102040810) >> 56)
	flipped = FLIPPED_4_V[outflank_v] & 0x0008080808080800

	outflank_h = uint64(OUTFLANK_3[(O>>33)&0x3f]) & (P >> 32)
	flipped |= FLIPPED_3_H[outflank_h] & 0x000000ff00000000

	outflank_d7 = uint64(OUTFLANK_3[((O&0x0002040810204000)*0x0101010101010101)>>57]) & (((P & 0x0102040810204080) * 0x0101010101010101) >> 56)
	flipped |= FLIPPED_3_H[outflank_d7] & 0x0002040810204000

	outflank_d9 = uint64(OUTFLANK_3[((O&0x0020100804020000)*0x0101010101010101)>>57]) & (((P & 0x4020100804020100) * 0x0101010101010101) >> 56)
	flipped |= FLIPPED_3_H[outflank_d9] & 0x0020100804020000

	return flipped
}

/**
 * Compute flipped discs when playing on square E5.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_E5(P, O uint64) uint64 {
	var outflank_h, outflank_v, outflank_d7, outflank_d9 uint64
	var flipped uint64

	outflank_v = uint64(OUTFLANK_4[((O&0x0010101010101000)*0x0010204081020408)>>57]) & (((P & 0x1010101010101010) * 0x0010204081020408) >> 56)
	flipped = FLIPPED_4_V[outflank_v] & 0x0010101010101000

	outflank_h = uint64(OUTFLANK_4[(O>>33)&0x3f]) & (P >> 32)
	flipped |= FLIPPED_4_H[outflank_h] & 0x000000ff00000000

	outflank_d7 = uint64(OUTFLANK_4[((O&0x0004081020400000)*0x0101010101010101)>>57]) & (((P & 0x0204081020408000) * 0x0101010101010101) >> 56)
	flipped |= FLIPPED_4_H[outflank_d7] & 0x0004081020400000

	outflank_d9 = uint64(OUTFLANK_4[((O&0x0040201008040200)*0x0101010101010101)>>57]) & (((P & 0x8040201008040201) * 0x0101010101010101) >> 56)
	flipped |= FLIPPED_4_H[outflank_d9] & 0x0040201008040200

	return flipped
}

/**
 * Compute flipped discs when playing on square F5.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_F5(P, O uint64) uint64 {
	var outflank_h, outflank_b1f5f8, outflank_c8f5f1 uint64
	var flipped uint64

	outflank_b1f5f8 = uint64(OUTFLANK_4[((O&0x0020202010080400)*0x0080808080810204)>>57]) & (((P & 0x2020202010080402) * 0x0080808080810204) >> 56)
	flipped = FLIPPED_4_V[outflank_b1f5f8] & 0x0020202010080400

	outflank_c8f5f1 = uint64(OUTFLANK_3[((O&0x0008102020202000)*0x0002010080404040)>>57]) & ((((P & 0x0408102020202020) >> 2) * 0x1008040201010101) >> 56)
	flipped |= FLIPPED_3_U[outflank_c8f5f1] & 0x0008102020202000

	outflank_h = uint64(OUTFLANK_5[(O>>33)&0x3f]) & (P >> 32)
	flipped |= FLIPPED_5_H[outflank_h] & 0x000000ff00000000

	flipped |= (((P << 7) & 0x0000000040000000) | ((P >> 9) & 0x0000400000000000)) & O

	return flipped
}

/**
 * Compute flipped discs when playing on square G5.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_G5(P, O uint64) uint64 {
	var outflank_h, outflank_c1g5g8, outflank_d8g5g1 uint64
	var flipped uint64

	outflank_c1g5g8 = uint64(OUTFLANK_4[((O&0x0040404020100800)*0x0040404040408102)>>57]) & (((P & 0x4040404020100804) * 0x0040404040408102) >> 56)
	flipped = FLIPPED_4_V[outflank_c1g5g8] & 0x0040404020100800

	outflank_d8g5g1 = uint64(OUTFLANK_3[((O&0x0010204040404000)*0x0001008040202020)>>57]) & ((((P & 0x0810204040404040) >> 3) * 0x1008040201010101) >> 56)
	flipped |= FLIPPED_3_U[outflank_d8g5g1] & 0x0010204040404000

	outflank_h = uint64(OUTFLANK_7[(O>>32)&0x3e]) & (P >> 31)
	flipped |= (uint64)((-outflank_h)&0x3e) << 32

	return flipped
}

/**
 * Compute flipped discs when playing on square H5.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_H5(P, O uint64) uint64 {
	var outflank_h, outflank_d1h5h8, outflank_e8h5h1 uint64
	var flipped uint64

	outflank_d1h5h8 = uint64(OUTFLANK_4[((O&0x0080808040201000)*0x0020202020204081)>>57]) & (((P & 0x8080808040201008) * 0x0020202020204081) >> 56)
	flipped = FLIPPED_4_V[outflank_d1h5h8] & 0x0080808040201000

	outflank_e8h5h1 = uint64(OUTFLANK_3[((O&0x0020408080808000)*0x0000804020101010)>>57]) & ((((P & 0x1020408080808080) >> 4) * 0x1008040201010101) >> 56)
	flipped |= FLIPPED_3_U[outflank_e8h5h1] & 0x0020408080808000

	outflank_h = uint64(OUTFLANK_7[(O>>33)&0x3f]) & (P >> 32)
	flipped |= (uint64)((-outflank_h)&0x3f) << 33

	return flipped
}

/**
 * Compute flipped discs when playing on square A6.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_A6(P, O uint64) uint64 {
	var outflank_v uint64
	var flipped, outflank_h, flip_d7 uint64

	outflank_v = uint64(OUTFLANK_5[((O&0x0001010101010100)*0x0102040810204080)>>57]) & (((P & 0x0101010101010101) * 0x0102040810204080) >> 56)
	flipped = FLIPPED_5_V[outflank_v] & 0x0001010101010100

	outflank_h = ((O & 0x00007e0000000000) + 0x0000020000000000) & P
	flipped |= (outflank_h - (outflank_h >> 8)) & 0x00007e0000000000

	flip_d7 = O | 0x0040810000000000
	flip_d7 &= flip_d7 >> 7
	flip_d7 &= (flip_d7 >> 14) & 0x0000000204081000
	flipped |= flip_d7 & -(flip_d7 & (P << 7))

	flipped |= (P >> 9) & 0x0002000000000000 & O

	return flipped
}

/**
 * Compute flipped discs when playing on square B6.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_B6(P, O uint64) uint64 {
	var outflank_v uint64
	var flipped, outflank_h, flip_d7 uint64

	outflank_v = uint64(OUTFLANK_5[((O&0x0002020202020200)*0x0081020408102040)>>57]) & (((P & 0x0202020202020202) * 0x0081020408102040) >> 56)
	flipped = FLIPPED_5_V[outflank_v] & 0x0002020202020200

	outflank_h = ((O & 0x00007c0000000000) + 0x0000040000000000) & P
	flipped |= (outflank_h - (outflank_h >> 8)) & 0x00007c0000000000

	flip_d7 = O | 0x0081020000000000
	flip_d7 &= flip_d7 >> 7
	flip_d7 &= (flip_d7 >> 14) & 0x0000000408102000
	flipped |= flip_d7 & -(flip_d7 & (P << 7))

	flipped |= (P >> 9) & 0x0004000000000000 & O

	return flipped
}

/**
 * Compute flipped discs when playing on square C6.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_C6(P, O uint64) uint64 {
	var outflank_h, outflank_v, outflank_d7 uint64
	var flipped uint64

	outflank_v = uint64(OUTFLANK_5[((O&0x0004040404040400)*0x0040810204081020)>>57]) & (((P & 0x0404040404040404) * 0x0040810204081020) >> 56)
	flipped = FLIPPED_5_V[outflank_v] & 0x0004040404040400

	outflank_h = uint64(OUTFLANK_2[(O>>41)&0x3f]) & (P >> 40)
	flipped |= FLIPPED_2_H[outflank_h] & 0x0000ff0000000000

	outflank_d7 = uint64(OUTFLANK_2[((O&0x0002040810204000)*0x0101010101010101)>>57]) & (((P & 0x0102040810204080) * 0x0101010101010101) >> 56)
	flipped |= FLIPPED_2_H[outflank_d7] & 0x0002040810204000

	flipped |= ((P >> 9) | (P << 9)) & 0x0008000200000000 & O

	return flipped
}

/**
 * Compute flipped discs when playing on square D6.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_D6(P, O uint64) uint64 {
	var outflank_h, outflank_v, outflank_d uint64
	var flipped uint64

	outflank_v = uint64(OUTFLANK_5[((O&0x0008080808080800)*0x0020408102040810)>>57]) & (((P & 0x0808080808080808) * 0x0020408102040810) >> 56)
	flipped = FLIPPED_5_V[outflank_v] & 0x0008080808080800

	outflank_h = uint64(OUTFLANK_3[(O>>41)&0x3f]) & (P >> 40)
	flipped |= FLIPPED_3_H[outflank_h] & 0x0000ff0000000000

	outflank_d = uint64(OUTFLANK_3[((O&0x0000001422400000)*0x0101010101010101)>>57]) & (((P & 0x0000001422418000) * 0x0101010101010101) >> 56)
	flipped |= FLIPPED_3_H[outflank_d] & 0x0000001422400000 // A3D6H2

	flipped |= (((P >> 9) & 0x0010000000000000) | ((P >> 7) & 0x0004000000000000)) & O

	return flipped
}

/**
 * Compute flipped discs when playing on square E6.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_E6(P, O uint64) uint64 {
	var outflank_h, outflank_v, outflank_d uint64
	var flipped uint64

	outflank_v = uint64(OUTFLANK_5[((O&0x0010101010101000)*0x0010204081020408)>>57]) & (((P & 0x1010101010101010) * 0x0010204081020408) >> 56)
	flipped = FLIPPED_5_V[outflank_v] & 0x0010101010101000

	outflank_h = uint64(OUTFLANK_4[(O>>41)&0x3f]) & (P >> 40)
	flipped |= FLIPPED_4_H[outflank_h] & 0x0000ff0000000000

	outflank_d = uint64(OUTFLANK_4[((O&0x0000002844020000)*0x0101010101010101)>>57]) & (((P & 0x0000002844820100) * 0x0101010101010101) >> 56)
	flipped |= FLIPPED_4_H[outflank_d] & 0x0000002844020000 // A2E6H3

	flipped |= (((P >> 9) & 0x0020000000000000) | ((P >> 7) & 0x0008000000000000)) & O

	return flipped
}

/**
 * Compute flipped discs when playing on square F6.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_F6(P, O uint64) uint64 {
	var outflank_h, outflank_v, outflank_d9 uint64
	var flipped uint64

	outflank_v = uint64(OUTFLANK_5[((O&0x0020202020202000)*0x0008102040810204)>>57]) & (((P & 0x2020202020202020) * 0x0008102040810204) >> 56)
	flipped = FLIPPED_5_V[outflank_v] & 0x0020202020202000

	outflank_h = uint64(OUTFLANK_5[(O>>41)&0x3f]) & (P >> 40)
	flipped |= (FLIPPED_5_H[outflank_h] & 0x0000ff0000000000)

	flipped |= ((P >> 7) | (P << 7)) & 0x0010004000000000 & O

	outflank_d9 = uint64(OUTFLANK_5[((O&0x0040201008040200)*0x0101010101010101)>>57]) & (((P & 0x8040201008040201) * 0x0101010101010101) >> 56)
	flipped |= FLIPPED_5_H[outflank_d9] & 0x0040201008040200

	return flipped
}

/**
 * Compute flipped discs when playing on square G6.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_G6(P, O uint64) uint64 {
	var outflank_h, outflank_v uint64
	var flipped, flip_d9 uint64

	outflank_v = uint64(OUTFLANK_5[((O&0x0040404040404000)*0x0004081020408102)>>57]) & (((P & 0x4040404040404040) * 0x0004081020408102) >> 56)
	flipped = FLIPPED_5_V[outflank_v] & 0x0040404040404000

	outflank_h = uint64(OUTFLANK_7[(O>>40)&0x3e]) & (P >> 39)
	flipped |= (uint64)((-outflank_h)&0x3e) << 40

	flipped |= (P >> 7) & 0x0020000000000000 & O

	flip_d9 = O & ((O >> 9) | 0x0000002000000000)
	flip_d9 &= (((flip_d9 & 0x0000002010000000) >> 18) | 0x0000002010000000)
	flipped |= flip_d9 & -(flip_d9 & (P << 9))

	return flipped
}

/**
 * Compute flipped discs when playing on square H6.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_H6(P, O uint64) uint64 {
	var outflank_h, outflank_v uint64
	var flipped, flip_d9 uint64

	outflank_v = uint64(OUTFLANK_5[((O&0x0080808080808000)*0x0002040810204081)>>57]) & (((P & 0x8080808080808080) * 0x0002040810204081) >> 56)
	flipped = FLIPPED_5_V[outflank_v] & 0x0080808080808000

	outflank_h = uint64(OUTFLANK_7[(O>>41)&0x3f]) & (P >> 40)
	flipped |= (uint64)((-outflank_h)&0x3f) << 41

	flipped |= (P >> 7) & 0x0040000000000000 & O

	flip_d9 = O & ((O >> 9) | 0x0000004000000000)
	flip_d9 &= (((flip_d9 & 0x0000004020000000) >> 18) | 0x0000004020000000)
	flipped |= flip_d9 & -(flip_d9 & (P << 9))

	return flipped
}

/**
 * Compute flipped discs when playing on square A7.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_A7(P, O uint64) uint64 {
	var flipped, outflank_v, outflank_h, outflank_d7 uint64

	outflank_v = (0x0000010000000000 >> CONTIG_UP[((O&0x0000010101010100)*0x0102040810204080)>>56]) & P
	flipped = (-outflank_v * 2) & 0x0000010101010100

	outflank_h = ((O & 0x007e000000000000) + 0x0002000000000000) & P
	flipped |= (outflank_h - (outflank_h >> 8)) & 0x007e000000000000

	outflank_d7 = (0x0000020000000000 >> CONTIG_UPRIGHT[((O&0x0000020408102000)*0x0101010101010101)>>57]) & P
	flipped |= (-outflank_d7 * 2) & 0x0000020408102000

	return flipped
}

/**
 * Compute flipped discs when playing on square B7.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_B7(P, O uint64) uint64 {
	var flipped, outflank_v, outflank_h, outflank_d7 uint64

	outflank_v = (0x0000020000000000 >> CONTIG_UP[((O&0x0000020202020200)*0x0081020408102040)>>56]) & P
	flipped = (-outflank_v * 2) & 0x0000020202020200

	outflank_h = ((O & 0x007c000000000000) + 0x0004000000000000) & P
	flipped |= (outflank_h - (outflank_h >> 8)) & 0x007c000000000000

	outflank_d7 = (0x0000040000000000 >> CONTIG_UPRIGHT[((O&0x0000040810204000)*0x0101010101010101)>>58]) & P
	flipped |= (-outflank_d7 * 2) & 0x0000040810204000

	return flipped
}

/**
 * Compute flipped discs when playing on square C7.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_C7(P, O uint64) uint64 {
	var outflank_h, outflank_d uint64
	var flipped, outflank_v uint64

	outflank_v = (0x0000040000000000 >> CONTIG_UP[((O&0x0000040404040400)*0x0040810204081020)>>56]) & P
	flipped = (-outflank_v * 2) & 0x0000040404040400

	outflank_h = uint64(OUTFLANK_2[(O>>49)&0x3f]) & (P >> 48)
	flipped |= FLIPPED_2_H[outflank_h] & 0x00ff000000000000

	outflank_d = uint64(OUTFLANK_2[((O&0x00000a1020400000)*0x0101010101010101)>>57]) & (((P & 0x00000a1120408000) * 0x0101010101010101) >> 56)
	flipped |= FLIPPED_2_H[outflank_d] & 0x00000a1020400000 // A5C7H2

	return flipped
}

/**
 * Compute flipped discs when playing on square D7.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_D7(P, O uint64) uint64 {
	var outflank_h, outflank_d uint64
	var flipped, outflank_v uint64

	outflank_v = (0x0000080000000000 >> CONTIG_UP[((O&0x0000080808080800)*0x0020408102040810)>>56]) & P
	flipped = (-outflank_v * 2) & 0x0000080808080800

	outflank_h = uint64(OUTFLANK_3[(O>>49)&0x3f]) & (P >> 48)
	flipped |= FLIPPED_3_H[outflank_h] & 0x00ff000000000000

	outflank_d = uint64(OUTFLANK_3[((O&0x0000142240000000)*0x0101010101010101)>>57]) & (((P & 0x0000142241800000) * 0x0101010101010101) >> 56)
	flipped |= FLIPPED_3_H[outflank_d] & 0x0000142240000000 // A4D7H3

	return flipped
}

/**
 * Compute flipped discs when playing on square E7.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_E7(P, O uint64) uint64 {
	var outflank_h, outflank_d uint64
	var flipped, outflank_v uint64

	outflank_v = (0x0000100000000000 >> CONTIG_UP[((O&0x0000101010101000)*0x0010204081020408)>>56]) & P
	flipped = (-outflank_v * 2) & 0x0000101010101000

	outflank_h = uint64(OUTFLANK_4[(O>>49)&0x3f]) & (P >> 48)
	flipped |= FLIPPED_4_H[outflank_h] & 0x00ff000000000000

	outflank_d = uint64(OUTFLANK_4[((O&0x0000284402000000)*0x0101010101010101)>>57]) & (((P & 0x0000284482010000) * 0x0101010101010101) >> 56)
	flipped |= FLIPPED_4_H[outflank_d] & 0x0000284402000000 // A3E7H4

	return flipped
}

/**
 * Compute flipped discs when playing on square F7.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_F7(P, O uint64) uint64 {
	var outflank_h, outflank_d uint64
	var flipped, outflank_v uint64

	outflank_v = (0x0000200000000000 >> CONTIG_UP[((O&0x0000202020202000)*0x0008102040810204)>>56]) & P
	flipped = (-outflank_v * 2) & 0x0000202020202000

	outflank_h = uint64(OUTFLANK_5[(O>>49)&0x3f]) & (P >> 48)
	flipped |= FLIPPED_5_H[outflank_h] & 0x00ff000000000000

	outflank_d = uint64(OUTFLANK_5[((O&0x0000500804020000)*0x0101010101010101)>>57]) & (((P & 0x0000508804020100) * 0x0101010101010101) >> 56)
	flipped |= FLIPPED_5_H[outflank_d] & 0x0000500804020000 // A2F7H5

	return flipped
}

/**
 * Compute flipped discs when playing on square G7.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_G7(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d9 uint64

	outflank_v = (0x0000400000000000 >> CONTIG_UP[((O&0x0000404040404000)*0x0004081020408102)>>56]) & P
	flipped = (-outflank_v * 2) & 0x0000404040404000

	outflank_h = uint64(OUTFLANK_7[(O>>48)&0x3e]) & (P >> 47)
	flipped |= (uint64)((-outflank_h)&0x3e) << 48

	outflank_d9 = (0x0000200000000000 >> CONTIG_UPLEFT[((O&0x0000201008040200)*0x0101010101010101)>>56]) & P
	flipped |= (-outflank_d9 * 2) & 0x0000201008040200

	return flipped
}

/**
 * Compute flipped discs when playing on square H7.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_H7(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d9 uint64

	outflank_v = (0x0000800000000000 >> CONTIG_UP[((O&0x0000808080808000)*0x0002040810204081)>>56]) & P
	flipped = (-outflank_v * 2) & 0x0000808080808000

	outflank_h = uint64(OUTFLANK_7[(O>>49)&0x3f]) & (P >> 48)
	flipped |= (uint64)((-outflank_h)&0x3f) << 49

	outflank_d9 = (0x0000400000000000 >> CONTIG_UPLEFT[((O&0x0000402010080400)*0x0101010101010101)>>57]) & P
	flipped |= (-outflank_d9 * 2) & 0x0000402010080400

	return flipped
}

/**
 * Compute flipped discs when playing on square A8.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_A8(P, O uint64) uint64 {
	var flipped, outflank_v, outflank_h, outflank_d7 uint64

	outflank_v = (0x0001000000000000 >> CONTIG_UP[((O&0x0001010101010100)*0x0102040810204080)>>57]) & P
	flipped = (-outflank_v * 2) & 0x0001010101010100

	outflank_h = ((O & 0x7e00000000000000) + 0x0200000000000000) & P
	flipped |= (outflank_h - (outflank_h >> 8)) & 0x7e00000000000000

	outflank_d7 = (0x0002000000000000 >> CONTIG_UPRIGHT[((O&0x0002040810204000)*0x0101010101010101)>>57]) & P
	flipped |= (-outflank_d7 * 2) & 0x0002040810204000

	return flipped
}

/**
 * Compute flipped discs when playing on square B8.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_B8(P, O uint64) uint64 {
	var flipped, outflank_v, outflank_h, outflank_d7 uint64

	outflank_v = (0x0002000000000000 >> CONTIG_UP[((O&0x0002020202020200)*0x0081020408102040)>>57]) & P
	flipped = (-outflank_v * 2) & 0x0002020202020200

	outflank_h = ((O & 0x7c00000000000000) + 0x0400000000000000) & P
	flipped |= (outflank_h - (outflank_h >> 8)) & 0x7c00000000000000

	outflank_d7 = (0x0004000000000000 >> CONTIG_UPRIGHT[((O&0x0004081020400000)*0x0101010101010101)>>58]) & P
	flipped |= (-outflank_d7 * 2) & 0x0004081020400000

	return flipped
}

/**
 * Compute flipped discs when playing on square C8.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_C8(P, O uint64) uint64 {
	var outflank_h, outflank_d uint64
	var flipped, outflank_v uint64

	outflank_v = (0x0004000000000000 >> CONTIG_UP[((O&0x0004040404040400)*0x0040810204081020)>>57]) & P
	flipped = (-outflank_v * 2) & 0x0004040404040400

	outflank_h = uint64(OUTFLANK_2[(O>>57)&0x3f]) & (P >> 56)
	flipped |= FLIPPED_2_H[outflank_h] & 0xff00000000000000

	outflank_d = uint64(OUTFLANK_2[((O&0x000a102040000000)*0x0101010101010101)>>57]) & (((P & 0x000a112040800000) * 0x0101010101010101) >> 56)
	flipped |= FLIPPED_2_H[outflank_d] & 0x000a102040000000 // A6C8H3

	return flipped
}

/**
 * Compute flipped discs when playing on square D8.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_D8(P, O uint64) uint64 {
	var outflank_h, outflank_d uint64
	var flipped, outflank_v uint64

	outflank_v = (0x0008000000000000 >> CONTIG_UP[((O&0x0008080808080800)*0x0020408102040810)>>57]) & P
	flipped = (-outflank_v * 2) & 0x0008080808080800

	outflank_h = uint64(OUTFLANK_3[(O>>57)&0x3f]) & (P >> 56)
	flipped |= FLIPPED_3_H[outflank_h] & 0xff00000000000000

	outflank_d = uint64(OUTFLANK_3[((O&0x0014224000000000)*0x0101010101010101)>>57]) & (((P & 0x0014224180000000) * 0x0101010101010101) >> 56)
	flipped |= FLIPPED_3_H[outflank_d] & 0x0014224000000000 // A5D8H4

	return flipped
}

/**
 * Compute flipped discs when playing on square E8.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_E8(P, O uint64) uint64 {
	var outflank_h, outflank_d uint64
	var flipped, outflank_v uint64

	outflank_v = (0x0010000000000000 >> CONTIG_UP[((O&0x0010101010101000)*0x0010204081020408)>>57]) & P
	flipped = (-outflank_v * 2) & 0x0010101010101000

	outflank_h = uint64(OUTFLANK_4[(O>>57)&0x3f]) & (P >> 56)
	flipped |= FLIPPED_4_H[outflank_h] & 0xff00000000000000

	outflank_d = uint64(OUTFLANK_4[((O&0x0028440200000000)*0x0101010101010101)>>57]) & (((P & 0x0028448201000000) * 0x0101010101010101) >> 56)
	flipped |= FLIPPED_4_H[outflank_d] & 0x0028440200000000 // A4E8H5

	return flipped
}

/**
 * Compute flipped discs when playing on square F8.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_F8(P, O uint64) uint64 {
	var outflank_h, outflank_d uint64
	var flipped, outflank_v uint64

	outflank_v = (0x0020000000000000 >> CONTIG_UP[((O&0x0020202020202000)*0x0008102040810204)>>57]) & P
	flipped = (-outflank_v * 2) & 0x0020202020202000

	outflank_h = uint64(OUTFLANK_5[(O>>57)&0x3f]) & (P >> 56)
	flipped |= FLIPPED_5_H[outflank_h] & 0xff00000000000000

	outflank_d = uint64(OUTFLANK_5[((O&0x0050080402000000)*0x0101010101010101)>>57]) & (((P & 0x0050880402010000) * 0x0101010101010101) >> 56)
	flipped |= FLIPPED_5_H[outflank_d] & 0x0050080402000000 // A3F8H6

	return flipped
}

/**
 * Compute flipped discs when playing on square G8.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_G8(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d9 uint64

	outflank_v = (0x0040000000000000 >> CONTIG_UP[((O&0x0040404040404000)*0x0004081020408102)>>57]) & P
	flipped = (-outflank_v * 2) & 0x0040404040404000

	outflank_h = uint64(OUTFLANK_7[(O>>56)&0x3e]) & (P >> 55)
	flipped |= (uint64)((-outflank_h)&0x3e) << 56

	outflank_d9 = (0x0020000000000000 >> CONTIG_UPLEFT[((O&0x0020100804020000)*0x0101010101010101)>>56]) & P
	flipped |= (-outflank_d9 * 2) & 0x0020100804020000

	return flipped
}

/**
 * Compute flipped discs when playing on square H8.
 *
 * @param P player's disc pattern.
 * @param O opponent's disc pattern.
 * @return flipped disc pattern.
 */
func flip_H8(P, O uint64) uint64 {
	var outflank_h uint64
	var flipped, outflank_v, outflank_d9 uint64

	outflank_v = (0x0080000000000000 >> CONTIG_UP[((O&0x0080808080808000)*0x0002040810204081)>>57]) & P
	flipped = (-outflank_v * 2) & 0x0080808080808000

	outflank_h = uint64(OUTFLANK_7[(O>>57)&0x3f]) & (P >> 56)
	flipped |= (uint64)((-outflank_h)&0x3f) << 57

	outflank_d9 = (0x0040000000000000 >> CONTIG_UPLEFT[((O&0x0040201008040200)*0x0101010101010101)>>57]) & P
	flipped |= (-outflank_d9 * 2) & 0x0040201008040200

	return flipped
}

/** Array of functions to compute flipped discs */
var flip = [64]func(uint64, uint64) uint64{
	flip_A1, flip_B1, flip_C1, flip_D1,
	flip_E1, flip_F1, flip_G1, flip_H1,
	flip_A2, flip_B2, flip_C2, flip_D2,
	flip_E2, flip_F2, flip_G2, flip_H2,
	flip_A3, flip_B3, flip_C3, flip_D3,
	flip_E3, flip_F3, flip_G3, flip_H3,
	flip_A4, flip_B4, flip_C4, flip_D4,
	flip_E4, flip_F4, flip_G4, flip_H4,
	flip_A5, flip_B5, flip_C5, flip_D5,
	flip_E5, flip_F5, flip_G5, flip_H5,
	flip_A6, flip_B6, flip_C6, flip_D6,
	flip_E6, flip_F6, flip_G6, flip_H6,
	flip_A7, flip_B7, flip_C7, flip_D7,
	flip_E7, flip_F7, flip_G7, flip_H7,
	flip_A8, flip_B8, flip_C8, flip_D8,
	flip_E8, flip_F8, flip_G8, flip_H8,
}
